---
title: "Complément sur le test de Student"
lang: fr
author: "Théo Leroy"
date: "8 octbre 2024"
format:
  live-html:
    code-background: true
    toc: true
    page-layout: full
webr:
  render-df: gt-interactive
  resources:
    - ./../data/eucalyptus.txt
  packages:
      - dplyr
      - readr
      - ggplot2
      - cowplot
fig-align: center
editor: 
  markdown: 
    wrap: 72
---


{{< include ./../_extensions/r-wasm/live/_knitr.qmd >}}


## Énoncé du test

## Représentation graphique

::: {.panel-tabset group="language"}
### Base R

```{webr}
#| envir: demo1
#| autorun: true
#| fig-width: 9
#| fig-height: 8
#| input:
#|   - t
#|   - ddl
#|   - abscisse_max
#|   - alpha
# On définit une disposition 3x1 pour la sortie sortie graphique
layout(mat = matrix(c(1, 2, 3), nrow = 3, ncol = 1),  heights = c(3, 3, 1))
       
# On définit un vecteur des abscisses
x <- seq(from = -abscisse_max, to = abscisse_max, length.out = 500)

couleur_courbe <- "#8AA0E0"
couleur_rejet_h0 <- "#00A658"
couleur_non_rejet_h0 <- "#F55E00"

couleur_test <- couleur_rejet_h0
couleurs_legende <- c("black", "grey60")
if(abs(t) < qt(p = 1-alpha/2, df = ddl)){
  couleur_test <- couleur_non_rejet_h0
  couleurs_legende <- c("grey60", "black")
}

####################################
#            DENSITÉ               #
####################################
par(mar=c(4, 4, 1.5, 0.5), cex = 1.1)
# On tracer la densité de la loi de Student
curve(
  dt(x = x, df = ddl),
  from = min(x),
  to = max(x),
  col = couleur_courbe,
  lwd = 2,
  ylab = "Densité",
  xlab = expression("x"),
  main = paste("Densité de la loi de Student (df =", ddl, ")"),
  ylim = c(0, 0.45),
  xaxs = "i",
  yaxs = "i"
)

# On représente l'aire de la p-valeur en rouge
polygon(
  c(min(x), x[x < -abs(t)], -abs(t)),
  c(0,  dt(x = x[x < -abs(t)], df = ddl), 0),
  col = adjustcolor(couleur_test, alpha = 0.3),
  border = NA
)
polygon(
  c(abs(t), x[x >= 0 & x > abs(t)], max(x)),
  c(0, dt(x = x[x >= 0 & x > abs(t)], df = ddl), 0),
  col = adjustcolor(couleur_test, alpha = 0.3),
  border = NA
)
# On écrit la p-valeur dans le coin supérieur gauche du graphique
text(
  x = -abscisse_max,
  y = 0.4,
  labels = paste0(
    " p-value = ",
    formatC(2*pt(q = -abs(t), df = ddl), decimal.mark = ',', digits = 2)
  ),
  adj = 0,
  col = couleur_test,
  cex = 1.25
)
# On représente la statistique de test par une ligne pointillée
lines(
  x = c(t, t),
  y = c(0, dt(x = t, df = ddl) + 0.05),
  lty = 2,
  lwd = 3
)
text(
  x = t+max(x)/20,
  y = dt(x = t, df = ddl)+0.05,
  labels = "t",
  adj = 0,
  cex = 1.5
)

# Ajouter une grille pour faciliter la lecture
grid()

####################################
#     FONCTION DE RÉPARTITION      #
####################################
par(mar=c(4,4,1.5,0.5), cex = 1.1)

# On trace la fonction de répartition de la loi de Student
curve(
  pt(q = x, df = ddl),
  from = min(x),
  to = max(x),
  col = couleur_courbe,
  lwd = 2,
  ylab = expression(paste(P,"(",t < x, ")")),
  xlab = expression("x"),
  main = paste("Fonction de répartition de la loi de Student (df =", ddl, ")"),
  xaxs = "i",
  yaxs = "i"
)
# On représente les zones de rejet du test
polygon(
  x = c(min(x), qt(p = alpha/2, df = ddl), qt(p = alpha/2, df = ddl), min(x)),
  y = c(0, 0, 1, 1),
  col = adjustcolor(couleur_rejet_h0, alpha = 0.3),
  border = NA
)
polygon(
  x = c(max(x), qt(p = 1-alpha/2, df = ddl), qt(p = 1-alpha/2, df = ddl), max(x)),
  y = c(0, 0, 1, 1),
  col = adjustcolor(couleur_rejet_h0, alpha = 0.3),
  border = NA
)
polygon(
  x = rep(qt(p = c(alpha/2, 1-alpha/2), df = ddl), each = 2),
  y = c(0, 1, 1, 0),
  col = adjustcolor(couleur_non_rejet_h0, alpha = 0.3),
  border = NA
)


# On représente les quantiles 1-alpha/2 et alpha/2
lines(
  x = c(min(x), max(x)),
  y = c(alpha/2, alpha/2),
  lty = 3
)
lines(
  x = c(min(x), max(x)),
  y = c(1-alpha/2, 1-alpha/2),
  lty = 3
)
text(
  x = -abscisse_max,
  y = 0.8,
  labels = bquote(
    " " ~
    q[1-alpha/2] ~
    "=" ~
    .(formatC(qt(p = 1-alpha/2, df = ddl), decimal.mark = ',', digits = 4))
  ),
  adj = 0,
  cex = 1.25
)


# On représente la statistique de test par une ligne pointillée
lines(
  x = c(t, t),
  y = c(0, pt(q = t, df = ddl) + 0.05),
  lty = 2,
  lwd = 3
)
text(
  x = t+max(x)/20,
  y = max(pt(q = t, df = ddl)/2, 0.05),
  labels = "t",
  adj = 0,
  cex = 1.5
)

# On ajoute une grille pour faciliter la lecture
grid()

####################################
#           LÉGENDE                #
####################################
par(mar=c(0,0,0,0), mai = c(0,0,0,0), cex = 0.8)

plot(1, type = "n", xlab = "", ylab = "", axes = FALSE, ann = FALSE)

# On explicite les couleurs avec une légende sur ce premier graphique
alpha_pct <- paste0(format(alpha*100, decimal.mark = ","), " %")
legend(
  x = "left",
  legend = c(
    bquote(
      "On rejette " ~H[0]~ " au risque " ~ alpha ~ "=" ~ .(alpha_pct) ~
      "i.e. " ~ beta[j] ~ "est significativement non nul."
    ),
    bquote(
      "On ne rejette pas " ~ H[0] ~ " au risque " ~ alpha ~ "=" ~ .(alpha_pct) ~ 
      "i.e. " ~ beta[j] ~ "n'est pas significatif."
    )
  ),
  text.col = couleurs_legende,
  col = c(couleur_rejet_h0, couleur_non_rejet_h0),
  pch = c(15, 15),
  bty = "n",             # Pas de boîte
  cex = 1.5
) 
```

### Tidyverse

```{webr}
#| envir: demo2
#| autorun: true
#| fig-width: 9
#| fig-height: 8
#| input:
#|   - t
#|   - ddl
#|   - abscisse_max
#|   - alpha
# Variables nécessaires
x <- seq(from = -abscisse_max, to = abscisse_max, length.out = 500)

couleur_courbe <- "#8AA0E0"
couleur_rejet_h0 <- "#00A658"
couleur_non_rejet_h0 <- "#F55E00"

couleur_test <- couleur_rejet_h0
couleurs_legende <- c("black", "grey60")
if(abs(t) < qt(p = 1-alpha/2, df = ddl)){
  couleur_test <- couleur_non_rejet_h0
  couleurs_legende <- c("grey60", "black")
}

# Calcul des densités et de la fonction de répartition
data <- data.frame(x = x) |>
  dplyr::mutate(
    densite = dt(x, df = ddl),
    repartition = pt(x, df = ddl)
  )

####################################
#            DENSITÉ               #
####################################
densite_plot <- ggplot2::ggplot(
  data = data,
  mapping = ggplot2::aes(x = x, y = densite)
) +
  ggplot2::geom_line(color = couleur_courbe, linewidth = 1.1) +
  ggplot2::geom_area(
    data = {data |> dplyr::filter(x < -abs(t))}, 
    mapping  = ggplot2::aes(y = densite),
    fill = adjustcolor(couleur_test, alpha.f = 0.3)
  ) +
  ggplot2::geom_area(
    data = {data |> dplyr::filter(x > abs(t))}, 
    mapping  = ggplot2::aes(y = densite),
    fill = adjustcolor(couleur_test, alpha.f = 0.3)
  ) +
  ggplot2::geom_vline(xintercept = t, linetype = "dashed", linewidth = 1.2) +
  ggplot2::annotate(
    geom = "text",
    x = t + max(x)/20,
    y = dt(t, df = ddl) + 0.05,
    label = "t",
    size = 5
  ) +
  ggplot2::annotate(
    geom = "text",
    x = -abscisse_max,
    y = 0.4, 
    label = paste0(
      " p-value = ",
      formatC(2*pt(q = -abs(t), df = ddl), decimal.mark = ',', digits = 2)
    ), 
    hjust = 0,
    size = 5,
    color = couleur_test
  ) +
  ggplot2::labs(
    title = paste("Densité de la loi de Student (df =", ddl, ")"),
    x = "x", 
    y = "Densité"
  ) +
  scale_x_continuous(limits = c(min(x), max(x)), expand = c(0, 0)) +
  ggplot2::theme_minimal() +
  ggplot2::theme(plot.title = ggplot2::element_text(size = 14, hjust = 0.5))

####################################
#     FONCTION DE RÉPARTITION      #
####################################
repartition_plot <- ggplot2::ggplot(
  data = data,
  mapping = aes(x = x, y = repartition)
) +
  ggplot2::geom_line(color = couleur_courbe, linewidth = 1.1) +
  ggplot2::geom_area(
    data = {data |> dplyr::filter(x < qt(p = alpha/2, df = ddl))}, 
    mapping = aes(y = 1),
    fill = adjustcolor(couleur_rejet_h0, alpha.f = 0.3)
  ) +
  ggplot2::geom_area(
    data = {data |> dplyr::filter(x > qt(p = 1-alpha/2, df = ddl))}, 
    mapping = aes(y = 1),
    fill = adjustcolor(couleur_rejet_h0, alpha.f = 0.3)
  ) +
  ggplot2::geom_area(
    data = {data |> dplyr::filter(abs(x) < qt(p = 1-alpha/2, df = ddl))}, 
    mapping = aes(y = 1),
    fill = adjustcolor(couleur_non_rejet_h0, alpha.f = 0.3)
  ) +
  ggplot2::geom_vline(
    xintercept = qt(p = c(alpha/2, 1-alpha/2), df = ddl),
    linetype = "dashed",
    linewidth = 0.3
  ) +
  ggplot2::geom_hline(yintercept = alpha/2, linetype = "dashed", linewidth = 0.3) +
  ggplot2::geom_hline(yintercept = 1-alpha/2, linetype = "dashed", linewidth = 0.3) +
  ggplot2::geom_vline(xintercept = t, linetype = "dashed", linewidth = 1.2) +
  ggplot2::annotate(
    geom = "text",
    x = t + max(x)/20,
    y = max(pt(t, df = ddl)/2, 0.05),
    label = "t",
    size = 5
  ) +
  ggplot2::annotate(
    geom = "text",
    x = -abscisse_max,
    y = 0.8, 
    label = list(
      bquote(
        " " ~
        q[1-alpha/2] ~
        "=" ~
        .(formatC(qt(p = 1-alpha/2, df = ddl), decimal.mark = ',', digits = 4))
      )
    ),
    parse = TRUE,
    hjust = 0,
    size = 5
  ) +
  ggplot2::labs(
    title = paste("Fonction de répartition de la loi de Student (df =", ddl, ")"),
    x = "x",
    y = expression(paste(P,"(",t < x, ")"))
  ) +
  scale_x_continuous(limits = c(min(x), max(x)), expand = c(0, 0)) +
  ggplot2::theme_minimal() +
  ggplot2::theme(plot.title = ggplot2::element_text(size = 14, hjust = 0.5))

####################################
#           LÉGENDE                #
####################################

alpha_pct <- paste0(format(alpha*100, decimal.mark = ","), " %")

legend_plot <- (ggplot2::ggplot(
  data =  data.frame(
    category = factor(c("h1", "h0")),
    val1 = c(0, 1),
    val2 = c(1, 1)
  ),
  mapping = ggplot2::aes(x = val1, y = val2, fill = category)
) +
  ggplot2::geom_bar(stat="identity") +
  ggplot2::scale_fill_manual(
    values = c("h1" = couleur_rejet_h0, "h0" = couleur_non_rejet_h0), 
    labels = c(
      "h1" = bquote(
      "On rejette " ~H[0]~ " au risque " ~ alpha ~ "=" ~ .(alpha_pct) ~
      "i.e. " ~ beta[j] ~ "est significativement non nul."
    ),
     "h0" = bquote(
      "On ne rejette pas " ~ H[0] ~ " au risque " ~ alpha ~ "=" ~ .(alpha_pct) ~ 
      "i.e. " ~ beta[j] ~ "n'est pas significatif."
    )),
    name = "" 
  ) +
  ggplot2::theme(
    legend.position = "left"
  )
) |> cowplot::get_plot_component('guide-box-left', return_all = TRUE)

cowplot::plot_grid(
  densite_plot,
  repartition_plot,
  legend_plot,
  ncol = 1,
  rel_heights = c(3, 3, 1)
)
```


:::

```{ojs}
//| echo: false
//| panel: input
//| layout-ncol: 2
viewof abscisse_max = Object.assign(
  Inputs.range(
    [1, 100],
    {step: 1, label: "Abscisse maximum (abscisse_max)", value: 4}
  ),
  {style: '--label-width: 150px'}
) ;
viewof alpha = Object.assign(
  Inputs.range(
    [0, 1],
    {step: 0.01, label: "Risque de premiere espèce (alpha)", value: 0.05}
  ),
  {style: '--label-width: 150px'}
) ;
viewof t = Object.assign(
  Inputs.range(
    [-abscisse_max, abscisse_max],
    {step: 0.1, label: "Statistique de test (t)", value: 1}
  ),
  {style: '--label-width: 150px'}
) ;
viewof ddl =  Object.assign(
  Inputs.range(
    [1, 20],
    {step: 1, label: "Degrés de liberté (ddl)", value: 5}
  ),
  {style: '--label-width: 150px'}
)
```
